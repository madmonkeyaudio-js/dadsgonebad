{"ast":null,"code":"import { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport ExponentUpdates from './ExponentUpdates';\nexport async function reload() {\n  await ExponentUpdates.reload();\n}\nexport async function reloadFromCache() {\n  await ExponentUpdates.reloadFromCache();\n}\nexport async function checkForUpdateAsync() {\n  if (!ExponentUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n\n  const result = await ExponentUpdates.checkForUpdateAsync();\n\n  if (!result) {\n    return {\n      isAvailable: false\n    };\n  }\n\n  return {\n    isAvailable: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result\n  };\n}\nexport async function fetchUpdateAsync({\n  eventListener\n} = {}) {\n  if (!ExponentUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n\n  let subscription;\n  let result;\n\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n\n  if (!result) {\n    return {\n      isNew: false\n    };\n  }\n\n  return {\n    isNew: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result\n  };\n}\nexport async function clearUpdateCacheExperimentalAsync(abiVersion) {\n  if (!ExponentUpdates.clearUpdateCacheAsync) {\n    throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n  }\n\n  return ExponentUpdates.clearUpdateCacheAsync(abiVersion);\n}\n\nlet _emitter;\n\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n\n  return _emitter;\n}\n\nfunction _emitEvent(params) {\n  let newParams = params;\n\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener) {\n  let emitter = _getEmitter();\n\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error'\n};","map":null,"metadata":{},"sourceType":"module"}