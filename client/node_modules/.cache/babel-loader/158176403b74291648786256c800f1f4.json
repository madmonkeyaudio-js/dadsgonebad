{"ast":null,"code":"import _slicedToArray from \"/Users/jonathangross/GA-26/dadsgonebad/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { canUseViewport, canUseEventListeners } from 'fbjs/lib/ExecutionEnvironment';\nimport { Orientation, WebOrientationLock, WebOrientation } from './ScreenOrientation.types';\nimport { getOrientationLockAsync, getOrientationAsync } from './ScreenOrientation';\nconst OrientationLockAPIToWeb = {\n  DEFAULT: WebOrientationLock.NATURAL,\n  ALL: WebOrientationLock.ANY,\n  PORTRAIT: WebOrientationLock.PORTRAIT,\n  PORTRAIT_UP: WebOrientationLock.PORTRAIT_PRIMARY,\n  PORTRAIT_DOWN: WebOrientationLock.PORTRAIT_SECONDARY,\n  LANDSCAPE: WebOrientationLock.LANDSCAPE,\n  LANDSCAPE_LEFT: WebOrientationLock.LANDSCAPE_PRIMARY,\n  LANDSCAPE_RIGHT: WebOrientationLock.LANDSCAPE_SECONDARY\n};\nconst OrientationWebToAPI = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT\n};\n\nconst _ref = canUseViewport && window,\n      screen = _ref.screen;\n\nconst orientation = canUseViewport && (screen.orientation || screen.msOrientation || null);\n\nasync function emitOrientationEvent() {\n  const _ref2 = await Promise.all([getOrientationLockAsync(), getOrientationAsync()]),\n        _ref3 = _slicedToArray(_ref2, 2),\n        orientationLock = _ref3[0],\n        orientationInfo = _ref3[1];\n\n  SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n    orientationLock,\n    orientationInfo\n  });\n}\n\nif (canUseEventListeners) {\n  if (orientation) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock) {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.\");\n\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n\n    case WebOrientationLock.NATURAL:\n      return 'default';\n\n    default:\n      return orientationLock;\n  }\n}\n\nasync function _lockAsync(webOrientationLock) {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.\");\n  }\n\n  if (screen.orientation && screen.orientation.lock) {\n    await screen.orientation.lock(webOrientationLock);\n  } else if (screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation']) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n\n    const lockOrientation = screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation']; // correct `this` context must be passed in otherwise method call is disallowed by browser\n\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n\n    if (!isSuccess) {\n      throw new Error(\"Applying orientation lock: \".concat(JSON.stringify(webOrientationLock), \" to device was denied\"));\n    }\n  } else {\n    throw new Error(\"expo-screen-orientation: The browser doesn't support locking screen orientation.\");\n  }\n}\n\nlet _lastWebOrientationLock = WebOrientationLock.UNKNOWN;\nexport default {\n  get name() {\n    return 'ExpoScreenOrientation';\n  },\n\n  async supportsOrientationLockAsync(orientationLock) {\n    return orientationLock in OrientationLockAPIToWeb;\n  },\n\n  async getPlatformOrientationLockAsync() {\n    return _lastWebOrientationLock;\n  },\n\n  async getOrientationAsync() {\n    const webOrientation = screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n\n    if (!webOrientation) {\n      return {\n        orientation: Orientation.UNKNOWN\n      };\n    }\n\n    return {\n      orientation: OrientationWebToAPI[webOrientation]\n    };\n  },\n\n  async lockAsync(orientationLock) {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n\n    if (!webOrientationLock) {\n      throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n    }\n\n    await _lockAsync(webOrientationLock);\n  },\n\n  async lockPlatformAsync(webOrientationLock) {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  },\n\n  async unlockAsync() {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation']) {\n      const unlockOrientation = screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation']; // correct `this` context must be passed in otherwise method call is disallowed by browser\n\n      const isSuccess = unlockOrientation.call(screen);\n\n      if (!isSuccess) {\n        throw new Error(\"Unlocking screen orientation on device was denied\");\n      }\n    } else {\n      throw new Error(\"expo-screen-orientation: The browser doesn't support unlocking screen orientation.\");\n    }\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}