{"ast":null,"code":"import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nexport class EventEmitter {\n  constructor(nativeModule) {\n    this._listenerCount = 0;\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n\n  addListener(eventName, listener) {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      }\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName) {\n    const removedListenerCount = this._eventEmitter.listeners(eventName).length;\n\n    this._eventEmitter.removeAllListeners(eventName);\n\n    this._listenerCount -= removedListenerCount;\n    invariant(this._listenerCount >= 0, \"EventEmitter must have a non-negative number of listeners\");\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription) {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n\n    this._listenerCount--; // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n\n    delete subscription[nativeEmitterSubscriptionKey]; // Release closed-over references to the emitter\n\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName, ...params) {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}