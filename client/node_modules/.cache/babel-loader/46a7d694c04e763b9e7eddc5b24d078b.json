{"ast":null,"code":"import { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\nexport function guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n\n  if (!navigator.serviceWorker) {\n    throw new Error('Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw new Error('Cannot use Notifications without permissions. Please request permissions with `expo-permissions`');\n  }\n}\nexport async function getExponentPushTokenAsync() {\n  if (!Constants.manifest.owner || !Constants.manifest.slug) {\n    throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n  }\n\n  const data = await _subscribeUserToPushAsync();\n  const experienceId = \"@\".concat(Constants.manifest.owner, \"/\").concat(Constants.manifest.slug);\n  const tokenArguments = {\n    deviceId: Constants.installationId,\n    experienceId,\n    // Also uses `experienceId` for `appId` because there's no `appId` for web.\n    appId: experienceId,\n    deviceToken: JSON.stringify(data),\n    type: 'web'\n  };\n  const response = await fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n    method: 'POST',\n    body: JSON.stringify(tokenArguments)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return response;\n  }).then(response => response.json()).catch(error => {\n    throw new CodedError('E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with Expo. (' + error + ')');\n  });\n  return response.data.expoPushToken;\n}\nexport async function getDevicePushTokenAsync() {\n  const data = await _subscribeUserToPushAsync();\n  return {\n    type: Platform.OS,\n    data\n  };\n}\n\nasync function _subscribeUserToPushAsync() {\n  if (!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey) {\n    throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n  }\n\n  guardPermission();\n  const registration = await navigator.serviceWorker.register('/expo-service-worker.js');\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new Error('Notifications might not be working because the service worker API is not active.');\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey)\n  };\n  const pushSubscription = await registration.pushManager.subscribe(subscribeOptions).catch(error => {\n    throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + error + ')');\n  });\n  const pushSubscriptionJson = pushSubscription.toJSON();\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys.p256dh,\n      auth: pushSubscriptionJson.keys.auth\n    }\n  }; // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n\n  let notificationIcon = (Constants.manifest.notification || {}).icon;\n  await registration.active.postMessage(JSON.stringify({\n    fromExpoWebClient: {\n      notificationIcon\n    }\n  }));\n  return subscriptionObject;\n} // https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\n\n\nfunction _urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}","map":null,"metadata":{},"sourceType":"module"}