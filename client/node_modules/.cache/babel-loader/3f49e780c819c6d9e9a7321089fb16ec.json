{"ast":null,"code":"import _slicedToArray from \"/Users/jonathangross/GA-26/dadsgonebad/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jonathangross/GA-26/dadsgonebad/src/components/makeWheel.jsx\";\nimport React, { Component } from 'react';\nimport { StyleSheet, View, Text as RNText, Dimensions, Animated } from 'react-native';\nimport { GestureHandler, Svg } from 'expo';\nimport * as d3Shape from 'd3-shape';\nimport color from 'randomcolor';\nimport { snap } from '@popmotion/popcorn';\nconst PanGestureHandler = GestureHandler.PanGestureHandler,\n      State = GestureHandler.State;\nconst Path = Svg.Path,\n      G = Svg.G,\n      Text = Svg.Text,\n      TSpan = Svg.TSpan;\n\nconst _Dimensions$get = Dimensions.get('screen'),\n      width = _Dimensions$get.width;\n\nconst numberOfSegments = 12;\nconst wheelSize = width * 0.95;\nconst fontSize = 26;\nconst oneTurn = 360;\nconst angleBySegment = oneTurn / numberOfSegments;\nconst angleOffset = angleBySegment / 2;\nconst knobFill = color({\n  hue: 'purple'\n});\n\nconst makeWheel = () => {\n  const data = Array.from({\n    length: numberOfSegments\n  }).fill(1);\n  const arcs = d3Shape.pie()(data);\n  const colors = color({\n    luminosity: 'dark',\n    count: numberOfSegments\n  });\n  return arcs.map((arc, index) => {\n    const instance = d3Shape.arc().padAngle(0.01).outerRadius(width / 2).innerRadius(20);\n    return {\n      path: instance(arc),\n      color: colors[index],\n      value: Math.round(Math.random() * 10 + 1) * 200,\n      //[200, 2200]\n      centroid: instance.centroid(arc)\n    };\n  });\n};\n\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this._wheelPaths = makeWheel();\n    this._angle = new Animated.Value(0);\n    this.angle = 0;\n    this.state = {\n      enabled: true,\n      finished: false,\n      winner: null\n    };\n\n    this._getWinnerIndex = () => {\n      const deg = Math.abs(Math.round(this.angle % oneTurn));\n      return Math.floor(deg / angleBySegment);\n    };\n\n    this._onPan = ({\n      nativeEvent\n    }) => {\n      if (nativeEvent.state === State.END) {\n        const velocityY = nativeEvent.velocityY;\n        Animated.decay(this._angle, {\n          velocity: velocityY / 1000,\n          deceleration: 0.999,\n          useNativeDriver: true\n        }).start(() => {\n          this._angle.setValue(this.angle % oneTurn);\n\n          const snapTo = snap(oneTurn / numberOfSegments);\n          Animated.timing(this._angle, {\n            toValue: snapTo(this.angle),\n            duration: 300,\n            useNativeDriver: true\n          }).start(() => {\n            const winnerIndex = this._getWinnerIndex();\n\n            this.setState({\n              enabled: true,\n              finished: true,\n              winner: this._wheelPaths[winnerIndex].value\n            });\n          }); // do something here;\n        });\n      }\n    };\n\n    this._renderKnob = () => {\n      const knobSize = 30; // [0, numberOfSegments]\n\n      const YOLO = Animated.modulo(Animated.divide(Animated.modulo(Animated.subtract(this._angle, angleOffset), oneTurn), new Animated.Value(angleBySegment)), 1);\n      return React.createElement(Animated.View, {\n        style: {\n          width: knobSize,\n          height: knobSize * 2,\n          justifyContent: 'flex-end',\n          zIndex: 1,\n          transform: [{\n            rotate: YOLO.interpolate({\n              inputRange: [-1, -0.5, -0.0001, 0.0001, 0.5, 1],\n              outputRange: ['0deg', '0deg', '35deg', '-35deg', '0deg', '0deg']\n            })\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Svg, {\n        width: knobSize,\n        height: knobSize * 100 / 57,\n        viewBox: \"0 0 57 100\",\n        style: {\n          transform: [{\n            translateY: 8\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(Path, {\n        d: \"M28.034,0C12.552,0,0,12.552,0,28.034S28.034,100,28.034,100s28.034-56.483,28.034-71.966S43.517,0,28.034,0z   M28.034,40.477c-6.871,0-12.442-5.572-12.442-12.442c0-6.872,5.571-12.442,12.442-12.442c6.872,0,12.442,5.57,12.442,12.442  C40.477,34.905,34.906,40.477,28.034,40.477z\",\n        fill: knobFill,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })));\n    };\n\n    this._renderWinner = () => {\n      return React.createElement(RNText, {\n        style: styles.winnerText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Winner is: \", this.state.winner);\n    };\n\n    this._renderSvgWheel = () => {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, this._renderKnob(), React.createElement(Animated.View, {\n        style: {\n          alignItems: 'center',\n          justifyContent: 'center',\n          transform: [{\n            rotate: this._angle.interpolate({\n              inputRange: [-oneTurn, 0, oneTurn],\n              outputRange: [\"-\".concat(oneTurn, \"deg\"), \"0deg\", \"\".concat(oneTurn, \"deg\")]\n            })\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Svg, {\n        width: wheelSize,\n        height: wheelSize,\n        viewBox: \"0 0 \".concat(width, \" \").concat(width),\n        style: {\n          transform: [{\n            rotate: \"-\".concat(angleOffset, \"deg\")\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(G, {\n        y: width / 2,\n        x: width / 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, this._wheelPaths.map((arc, i) => {\n        const _arc$centroid = _slicedToArray(arc.centroid, 2),\n              x = _arc$centroid[0],\n              y = _arc$centroid[1];\n\n        const number = arc.value.toString();\n        return React.createElement(G, {\n          key: \"arc-\".concat(i),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, React.createElement(Path, {\n          d: arc.path,\n          fill: arc.color,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }), React.createElement(G, {\n          rotation: i * oneTurn / numberOfSegments + angleOffset,\n          origin: \"\".concat(x, \", \").concat(y),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, React.createElement(Text, {\n          x: x,\n          y: y - 70,\n          fill: \"white\",\n          textAnchor: \"middle\",\n          fontSize: fontSize,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, Array.from({\n          length: number.length\n        }).map((_, j) => {\n          return React.createElement(TSpan, {\n            x: x,\n            dy: fontSize,\n            key: \"arc-\".concat(i, \"-slice-\").concat(j),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194\n            },\n            __self: this\n          }, number.charAt(j));\n        }))));\n      })))));\n    };\n  }\n\n  componentDidMount() {\n    this._angle.addListener(event => {\n      if (this.state.enabled) {\n        this.setState({\n          enabled: false,\n          finished: false\n        });\n      }\n\n      this.angle = event.value;\n    });\n  }\n\n  render() {\n    return React.createElement(PanGestureHandler, {\n      onHandlerStateChange: this._onPan,\n      enabled: this.state.enabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this._renderSvgWheel(), this.state.finished && this.state.enabled && this._renderWinner()));\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  winnerText: {\n    fontSize: 32,\n    fontFamily: 'Menlo',\n    position: 'absolute',\n    bottom: 10\n  }\n});","map":{"version":3,"sources":["/Users/jonathangross/GA-26/dadsgonebad/src/components/makeWheel.jsx"],"names":["React","Component","StyleSheet","View","Text","RNText","Dimensions","Animated","GestureHandler","Svg","d3Shape","color","snap","PanGestureHandler","State","Path","G","TSpan","get","width","numberOfSegments","wheelSize","fontSize","oneTurn","angleBySegment","angleOffset","knobFill","hue","makeWheel","data","Array","from","length","fill","arcs","pie","colors","luminosity","count","map","arc","index","instance","padAngle","outerRadius","innerRadius","path","value","Math","round","random","centroid","App","_wheelPaths","_angle","Value","angle","state","enabled","finished","winner","_getWinnerIndex","deg","abs","floor","_onPan","nativeEvent","END","velocityY","decay","velocity","deceleration","useNativeDriver","start","setValue","snapTo","timing","toValue","duration","winnerIndex","setState","_renderKnob","knobSize","YOLO","modulo","divide","subtract","height","justifyContent","zIndex","transform","rotate","interpolate","inputRange","outputRange","translateY","_renderWinner","styles","winnerText","_renderSvgWheel","container","alignItems","i","x","y","number","toString","_","j","charAt","componentDidMount","addListener","event","render","create","flex","backgroundColor","fontFamily","position","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {StyleSheet,View,Text as RNText,Dimensions,Animated} from 'react-native';\n  import { GestureHandler, Svg } from 'expo';\n  import * as d3Shape from 'd3-shape';\n  import color from 'randomcolor';\n  import { snap } from '@popmotion/popcorn';\n  const { PanGestureHandler, State } = GestureHandler;\n  const { Path, G, Text, TSpan } = Svg;\n  const { width } = Dimensions.get('screen');\n  const numberOfSegments = 12;\n  const wheelSize = width * 0.95;\n  const fontSize = 26;\n  const oneTurn = 360;\n  const angleBySegment = oneTurn / numberOfSegments;\n  const angleOffset = angleBySegment / 2;\n  const knobFill = color({ hue: 'purple' });\n  const makeWheel = () => {\n    const data = Array.from({ length: numberOfSegments }).fill(1);\n    const arcs = d3Shape.pie()(data);\n    const colors = color({\n      luminosity: 'dark',\n      count: numberOfSegments\n    });\n  \n    return arcs.map((arc, index) => {\n      const instance = d3Shape\n        .arc()\n        .padAngle(0.01)\n        .outerRadius(width / 2)\n        .innerRadius(20);\n  \n      return {\n        path: instance(arc),\n        color: colors[index],\n        value: Math.round(Math.random() * 10 + 1) * 200, //[200, 2200]\n        centroid: instance.centroid(arc)\n      };\n    });\n  };\n  \n  export default class App extends React.Component {\n    _wheelPaths = makeWheel();\n    _angle = new Animated.Value(0);\n    angle = 0;\n    state = {\n      enabled: true,\n      finished: false,\n      winner: null\n    };\n    componentDidMount() {\n      this._angle.addListener(event => {\n        if (this.state.enabled) {\n          this.setState({\n            enabled: false,\n            finished: false\n          });\n        }\n        this.angle = event.value;\n      });\n    }\n    _getWinnerIndex = () => {\n      const deg = Math.abs(Math.round(this.angle % oneTurn));\n      return Math.floor(deg / angleBySegment);\n    };\n    _onPan = ({ nativeEvent }) => {\n      if (nativeEvent.state === State.END) {\n        const { velocityY } = nativeEvent;\n        Animated.decay(this._angle, {\n          velocity: velocityY / 1000,\n          deceleration: 0.999,\n          useNativeDriver: true\n        }).start(() => {\n          this._angle.setValue(this.angle % oneTurn);\n          const snapTo = snap(oneTurn / numberOfSegments);\n          Animated.timing(this._angle, {\n            toValue: snapTo(this.angle),\n            duration: 300,\n            useNativeDriver: true\n          }).start(() => {\n            const winnerIndex = this._getWinnerIndex();\n            this.setState({\n              enabled: true,\n              finished: true,\n              winner: this._wheelPaths[winnerIndex].value\n            });\n          });\n          // do something here;\n        });\n      }\n    };\n    render() {\n      return (\n        <PanGestureHandler\n          onHandlerStateChange={this._onPan}\n          enabled={this.state.enabled}\n        >\n          <View style={styles.container}>\n            {this._renderSvgWheel()}\n            {this.state.finished && this.state.enabled && this._renderWinner()}\n          </View>\n        </PanGestureHandler>\n      );\n    }\n    _renderKnob = () => {\n      const knobSize = 30;\n      // [0, numberOfSegments]\n      const YOLO = Animated.modulo(\n        Animated.divide(\n          Animated.modulo(Animated.subtract(this._angle, angleOffset), oneTurn),\n          new Animated.Value(angleBySegment)\n        ),\n        1\n      );\n      return (\n        <Animated.View\n          style={{\n            width: knobSize,\n            height: knobSize * 2,\n            justifyContent: 'flex-end',\n            zIndex: 1,\n            transform: [\n              {\n                rotate: YOLO.interpolate({\n                  inputRange: [-1, -0.5, -0.0001, 0.0001, 0.5, 1],\n                  outputRange: ['0deg', '0deg', '35deg', '-35deg', '0deg', '0deg']\n                })\n              }\n            ]\n          }}\n        >\n          <Svg\n            width={knobSize}\n            height={(knobSize * 100) / 57}\n            viewBox={`0 0 57 100`}\n            style={{ transform: [{ translateY: 8 }] }}\n          >\n            <Path\n              d=\"M28.034,0C12.552,0,0,12.552,0,28.034S28.034,100,28.034,100s28.034-56.483,28.034-71.966S43.517,0,28.034,0z   M28.034,40.477c-6.871,0-12.442-5.572-12.442-12.442c0-6.872,5.571-12.442,12.442-12.442c6.872,0,12.442,5.57,12.442,12.442  C40.477,34.905,34.906,40.477,28.034,40.477z\"\n              fill={knobFill}\n            />\n          </Svg>\n        </Animated.View>\n      );\n    };\n    _renderWinner = () => {\n      return (\n        <RNText style={styles.winnerText}>Winner is: {this.state.winner}</RNText>\n      );\n    };\n    _renderSvgWheel = () => {\n      return (\n        <View style={styles.container}>\n          {this._renderKnob()}\n          <Animated.View\n            style={{\n              alignItems: 'center',\n              justifyContent: 'center',\n              transform: [\n                {\n                  rotate: this._angle.interpolate({\n                    inputRange: [-oneTurn, 0, oneTurn],\n                    outputRange: [`-${oneTurn}deg`, `0deg`, `${oneTurn}deg`]\n                  })\n                }\n              ]\n            }}\n          >\n            <Svg\n              width={wheelSize}\n              height={wheelSize}\n              viewBox={`0 0 ${width} ${width}`}\n              style={{ transform: [{ rotate: `-${angleOffset}deg` }] }}\n            >\n              <G y={width / 2} x={width / 2}>\n                {this._wheelPaths.map((arc, i) => {\n                  const [x, y] = arc.centroid;\n                  const number = arc.value.toString();\n                  return (\n                    <G key={`arc-${i}`}>\n                      <Path d={arc.path} fill={arc.color} />\n                      <G\n                        rotation={(i * oneTurn) / numberOfSegments + angleOffset}\n                        origin={`${x}, ${y}`}\n                      >\n                        <Text\n                          x={x}\n                          y={y - 70}\n                          fill=\"white\"\n                          textAnchor=\"middle\"\n                          fontSize={fontSize}\n                        >\n                          {Array.from({ length: number.length }).map((_, j) => {\n                            return (\n                              <TSpan\n                                x={x}\n                                dy={fontSize}\n                                key={`arc-${i}-slice-${j}`}\n                              >\n                                {number.charAt(j)}\n                              </TSpan>\n                            );\n                          })}\n                        </Text>\n                      </G>\n                    </G>\n                  );\n                })}\n              </G>\n            </Svg>\n          </Animated.View>\n        </View>\n      );\n    };\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    winnerText: {\n      fontSize: 32,\n      fontFamily: 'Menlo',\n      position: 'absolute',\n      bottom: 10\n    }\n  });"]},"metadata":{},"sourceType":"module"}