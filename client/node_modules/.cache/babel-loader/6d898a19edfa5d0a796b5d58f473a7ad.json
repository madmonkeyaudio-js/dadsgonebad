{"ast":null,"code":"import { AppState, Linking, Platform } from 'react-native';\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentWebBrowser from './ExpoWebBrowser';\nconst emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nexport async function getCustomTabsSupportingBrowsersAsync() {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\nexport async function warmUpAsync(browserPackage) {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\nexport async function mayInitWithUrlAsync(url, browserPackage) {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\nexport async function coolDownAsync(browserPackage) {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\nexport async function openBrowserAsync(url, browserParams = {}) {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  return await ExponentWebBrowser.openBrowserAsync(url, browserParams);\n}\nexport function dismissBrowser() {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n\n  ExponentWebBrowser.dismissBrowser();\n}\nexport async function openAuthSessionAsync(url, redirectUrl) {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl);\n  }\n}\nexport function dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler = null;\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\n\nlet _onWebBrowserCloseAndroid = null;\n\nfunction _onAppStateChangeAndroid(state) {\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(startUrl) {\n  let appStateChangedToActive = new Promise(resolve => {\n    _onWebBrowserCloseAndroid = resolve;\n    AppState.addEventListener('change', _onAppStateChangeAndroid);\n  });\n  let result = {\n    type: 'cancel'\n  };\n\n  let _ref = await openBrowserAsync(startUrl),\n      type = _ref.type;\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = {\n      type: 'dismiss'\n    };\n  }\n\n  AppState.removeEventListener('change', _onAppStateChangeAndroid);\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(startUrl, returnUrl) {\n  if (_redirectHandler) {\n    throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([_openBrowserAndWaitAndroidAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n    } else {\n      return await Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(resolve => {\n    _redirectHandler = event => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}