{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nimport { CodedError } from '@unimodules/core';\n\nfunction getExpoPackage() {\n  try {\n    return require('expo/package.json');\n  } catch (error) {\n    throw new CodedError('ERR_CONSTANTS', 'expoVersion & expoRuntimeVersion require the expo package to be installed.');\n  }\n}\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name() {\n    return 'ExponentConstants';\n  },\n\n  get appOwnership() {\n    return 'expo';\n  },\n\n  get installationId() {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n\n  get sessionId() {\n    return _sessionId;\n  },\n\n  get platform() {\n    return {\n      web: canUseDOM ? UAParser(navigator.userAgent) : undefined\n    };\n  },\n\n  get isHeadless() {\n    return false;\n  },\n\n  get isDevice() {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n\n  get isDetached() {\n    return false;\n  },\n\n  get expoVersion() {\n    return getExpoPackage().version;\n  },\n\n  get linkingUri() {\n    if (canUseDOM) {\n      // On native this is `exp://`\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n\n  get expoRuntimeVersion() {\n    return getExpoPackage().version;\n  },\n\n  get deviceName() {\n    const _parser$getResult = parser.getResult(),\n          browser = _parser$getResult.browser,\n          engine = _parser$getResult.engine,\n          OS = _parser$getResult.os;\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n\n  get nativeAppVersion() {\n    return null;\n  },\n\n  get nativeBuildVersion() {\n    return null;\n  },\n\n  get systemFonts() {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n\n  get statusBarHeight() {\n    return 0;\n  },\n\n  get deviceYearClass() {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n\n  get manifest() {\n    // This is defined by @expo/webpack-config.\n    // If your site is bundled with a different config then you may not have access to the app.json automatically.\n    return process.env.APP_MANIFEST || {};\n  },\n\n  get experienceUrl() {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n\n  get debugMode() {\n    return __DEV__;\n  },\n\n  async getWebViewUserAgentAsync() {\n    if (canUseDOM) {\n      return navigator.userAgent;\n    } else {\n      return null;\n    }\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}