{"ast":null,"code":"import URL from 'url-parse';\nexport function getFilename(url) {\n  const _ref = new URL(url, {}),\n        pathname = _ref.pathname;\n\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\nexport function getFileExtension(url) {\n  const filename = getFilename(url);\n  const dotIndex = filename.lastIndexOf('.'); // Ignore leading dots for hidden files\n\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\n/**\n * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n * parameters and fragments also are removed.\n *\n * For an Expo-hosted project with a manifest hosted at https://expo.io/@user/project/index.exp, the\n * base URL would be https://expo.io/@user/project.\n *\n * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n * to tell the OS to open the URLs in the the Expo client.\n */\n\nexport function getManifestBaseUrl(manifestUrl) {\n  const urlObject = new URL(manifestUrl, {}); // Change the scheme to http(s) if it is exp(s)\n\n  if (urlObject.protocol === 'exp:') {\n    urlObject.set('protocol', 'http:');\n  } else if (urlObject.protocol === 'exps:') {\n    urlObject.set('protocol', 'https:');\n  } // Trim filename, query parameters, and fragment, if any\n\n\n  const directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.set('pathname', directory);\n  urlObject.set('query', '');\n  urlObject.set('hash', '');\n  return urlObject.href;\n}","map":null,"metadata":{},"sourceType":"module"}