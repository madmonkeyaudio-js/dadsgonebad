{"ast":null,"code":"import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\nimport ExpoFontLoader from './ExpoFontLoader';\nconst isWeb = Platform.OS === 'web';\nconst isInClient = !isWeb && Constants.appOwnership === 'expo';\nconst isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\nconst loaded = {};\nconst loadPromises = {};\n\nfunction fontFamilyNeedsScoping(name) {\n  return (isInClient || isInIOSStandalone) && !Constants.systemFonts.includes(name) && name !== 'System' && !name.includes(Constants.sessionId);\n}\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n */\n\n\nexport function processFontFamily(name) {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\"You started loading the font \\\"\".concat(name, \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\"));\n      } else {\n        console.error(\"fontFamily \\\"\".concat(name, \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\"));\n      }\n    }\n\n    return 'System';\n  }\n\n  return \"ExpoFont-\".concat(_getNativeFontName(name));\n}\nexport function isLoaded(name) {\n  return loaded.hasOwnProperty(name);\n}\nexport function isLoading(name) {\n  return loadPromises.hasOwnProperty(name);\n}\nexport async function loadAsync(nameOrMap, source) {\n  if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  } // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n\n  if (!source) {\n    throw new Error(\"No source from which to load font \\\"\".concat(name, \"\\\"\"));\n  }\n\n  const asset = _getAssetForSource(source);\n\n  loadPromises[name] = (async () => {\n    try {\n      await _loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nfunction _getAssetForSource(source) {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  } // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n\n\n  return source;\n}\n\nasync function _loadSingleFontAsync(name, asset) {\n  await asset.downloadAsync();\n\n  if (!asset.downloaded) {\n    throw new Error(\"Failed to download asset for font \\\"\".concat(name, \"\\\"\"));\n  }\n\n  await ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n}\n\nfunction _getNativeFontName(name) {\n  if (fontFamilyNeedsScoping(name)) {\n    return \"\".concat(Constants.sessionId, \"-\").concat(name);\n  } else {\n    return name;\n  }\n}\n\nif (module && module.exports) {\n  let wasImportWarningShown = false; // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\"The syntax \\\"import { Font } from 'expo-font'\\\" is deprecated. Use \\\"import * as Font from 'expo-font'\\\" or import named exports instead. Support for the old syntax will be removed in SDK 33.\");\n        wasImportWarningShown = true;\n      }\n\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync\n      };\n    }\n\n  });\n}","map":null,"metadata":{},"sourceType":"module"}