{"ast":null,"code":"import compareVersions from 'compare-versions';\nimport { CodedError } from '@unimodules/react-native-adapter';\nconst postedWarnings = {};\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\n\nexport default function deprecate(library, deprecatedAPI, options = {}) {\n  const currentVersion = options.currentVersion,\n        versionToRemove = options.versionToRemove,\n        replacement = options.replacement;\n  const code = codeFromLibrary(library);\n  const key = \"\".concat(code, \":\").concat(deprecatedAPI, \":\").concat(replacement);\n\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (!currentVersion || !versionToRemove || compareVersions(currentVersion, versionToRemove) >= 0) {\n    let message = \"`\".concat(deprecatedAPI, \"` has been removed\");\n\n    if (versionToRemove) {\n      message = \"\".concat(message, \" as of version \\\"\").concat(versionToRemove, \"\\\"\");\n    }\n\n    if (replacement && replacement.length) {\n      message = \"\".concat(message, \" please migrate to: `\").concat(replacement, \"`\");\n    }\n\n    throw new CodedError(\"ERR_DEPRECATED_API\", prependLibrary(library, message));\n  }\n\n  let message = \"`\".concat(deprecatedAPI, \"` has been deprecated\");\n\n  if (replacement && replacement.length) {\n    message = \"\".concat(message, \" in favor of `\").concat(replacement, \"`\");\n  }\n\n  if (versionToRemove && versionToRemove.length) {\n    message = \"\".concat(message, \" and will be removed in version \\\"\").concat(versionToRemove, \"\\\"\");\n  }\n\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library, message) {\n  return \"\".concat(library, \": \").concat(message);\n}\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\n\n\nfunction codeFromLibrary(library) {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}","map":null,"metadata":{},"sourceType":"module"}