{"ast":null,"code":"import invariant from 'invariant';\nconst EventTypes = ['url'];\nconst listeners = [];\n\nfunction _validateURL(url) {\n  invariant(typeof url === 'string', \"Invalid URL: should be a string. Instead found: \".concat(url));\n  invariant(url, 'Invalid URL: cannot be empty');\n} // TODO: Bacon: For better parity this should extend EventEmitter like React Native.\n\n\nclass Linking {\n  addEventListener(type, listener) {\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \".concat(type, \" is not a valid event\"));\n\n    const nativeListener = nativeEvent => listener({\n      url: window.location.href,\n      nativeEvent\n    });\n\n    listeners.push({\n      listener,\n      nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n  }\n\n  removeEventListener(type, listener) {\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \".concat(type, \" is not a valid event.\"));\n    const listenerIndex = listeners.findIndex(pair => pair.listener === listener);\n    invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  }\n\n  async canOpenURL(url) {\n    _validateURL(url);\n\n    return true;\n  }\n\n  async getInitialURL() {\n    return window.location.href;\n  }\n\n  async openURL(url) {\n    _validateURL(url);\n\n    window.location.href = url;\n  }\n\n}\n\nexport default new Linking();","map":null,"metadata":{},"sourceType":"module"}