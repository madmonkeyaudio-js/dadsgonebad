{"ast":null,"code":"import { Platform, UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\nimport { Dimensions } from 'react-native';\n\nfunction getBasePath({\n  httpServerLocation\n}) {\n  if (httpServerLocation[0] === '/') {\n    return httpServerLocation.substr(1);\n  }\n\n  return httpServerLocation;\n}\n\nfunction getScale() {\n  return Dimensions.get('window').scale;\n}\n\nfunction getScaledAssetPath(asset) {\n  const scale = AssetSourceResolver.pickScale(asset.scales, getScale());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\nexport default class AssetSourceResolver {\n  constructor(serverUrl, jsbundleUrl, asset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer() {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem() {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset() {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    return this.scaledAssetURLNearBundle();\n  }\n\n  assetServerURL() {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);\n  }\n\n  scaledAssetPath() {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  scaledAssetURLNearBundle() {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n\n  resourceIdentifierWithoutScale() {\n    throw new UnavailabilityError('react-native', 'resourceIdentifierWithoutScale()');\n  }\n\n  drawableFolderInBundle() {\n    throw new UnavailabilityError('react-native', 'drawableFolderInBundle()');\n  }\n\n  fromSource(source) {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, getScale())\n    };\n  }\n\n  static pickScale(scales, deviceScale) {\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n\n    return scales[scales.length - 1] || 1;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}