{"ast":null,"code":"import _slicedToArray from \"/Users/jonathangross/GA-26/dadsgonebad/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { EventEmitter, Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock } from './ScreenOrientation.types';\nexport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock };\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\n\nlet _orientationChangeSubscribers = [];\nlet _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function allow(orientationLock) {\n  console.warn(\"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\");\n  lockAsync(orientationLock);\n}\nexport async function allowAsync(orientationLock) {\n  console.warn(\"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\");\n  await lockAsync(orientationLock);\n}\nexport async function lockAsync(orientationLock) {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\nexport async function lockPlatformAsync(options) {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const screenOrientationConstantAndroid = options.screenOrientationConstantAndroid,\n        screenOrientationArrayIOS = options.screenOrientationArrayIOS,\n        screenOrientationLockWeb = options.screenOrientationLockWeb;\n  let platformOrientationParam;\n\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \".concat(screenOrientationConstantAndroid));\n    }\n\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \".concat(screenOrientationArrayIOS));\n    }\n\n    const orientations = Object.values(Orientation);\n\n    for (let orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\"lockPlatformAsync iOS platform: \".concat(orientation, \" is not a valid Orientation\"));\n      }\n    }\n\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(\"Invalid Web Orientation Lock: \".concat(screenOrientationLockWeb));\n    }\n\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\nexport async function unlockAsync() {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n\n  await ExpoScreenOrientation.unlockAsync();\n}\nexport async function getOrientationAsync() {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\nexport async function getOrientationLockAsync() {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\nexport async function getPlatformOrientationLockAsync() {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock\n    };\n  } else {\n    return {};\n  }\n}\nexport async function supportsOrientationLockAsync(orientationLock) {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\nexport async function doesSupportAsync(orientationLock) {\n  console.warn(\"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\");\n  return await supportsOrientationLockAsync(orientationLock);\n} // Determine the event name lazily so Jest can set up mocks in advance\n\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n} // We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\n\n\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(\"addOrientationChangeListener cannot be called with \".concat(listener));\n  }\n\n  const subscription = _orientationChangeEmitter.addListener(getEventName(), async update => {\n    let orientationInfo, orientationLock;\n\n    if (Platform.OS === 'ios' || Platform.OS === 'web') {\n      // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n      orientationLock = update.orientationLock;\n      orientationInfo = update.orientationInfo;\n    } else {\n      // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n      var _ref = await Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      orientationLock = _ref2[0];\n      orientationInfo = _ref2[1];\n    }\n\n    listener({\n      orientationInfo,\n      orientationLock\n    });\n  });\n\n  _orientationChangeSubscribers.push(subscription);\n\n  return subscription;\n} // We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\n\nexport function removeOrientationChangeListeners() {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove(); // remove after a successful unsubscribe\n\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(\"Must pass in a valid subscription\");\n  }\n\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}","map":null,"metadata":{},"sourceType":"module"}